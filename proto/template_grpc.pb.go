// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto/template.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChittyChat_CreateConnection_FullMethodName = "/ChittyChat.ChittyChat/CreateConnection"
	ChittyChat_BroadcastMessage_FullMethodName = "/ChittyChat.ChittyChat/BroadcastMessage"
	ChittyChat_UserLeft_FullMethodName         = "/ChittyChat.ChittyChat/UserLeft"
)

// ChittyChatClient is the client API for ChittyChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChittyChatClient interface {
	CreateConnection(ctx context.Context, in *User, opts ...grpc.CallOption) (ChittyChat_CreateConnectionClient, error)
	BroadcastMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (ChittyChat_BroadcastMessageClient, error)
	UserLeft(ctx context.Context, in *User, opts ...grpc.CallOption) (*Close, error)
}

type chittyChatClient struct {
	cc grpc.ClientConnInterface
}

func NewChittyChatClient(cc grpc.ClientConnInterface) ChittyChatClient {
	return &chittyChatClient{cc}
}

func (c *chittyChatClient) CreateConnection(ctx context.Context, in *User, opts ...grpc.CallOption) (ChittyChat_CreateConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChittyChat_ServiceDesc.Streams[0], ChittyChat_CreateConnection_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chittyChatCreateConnectionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChittyChat_CreateConnectionClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chittyChatCreateConnectionClient struct {
	grpc.ClientStream
}

func (x *chittyChatCreateConnectionClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chittyChatClient) BroadcastMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (ChittyChat_BroadcastMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChittyChat_ServiceDesc.Streams[1], ChittyChat_BroadcastMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chittyChatBroadcastMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChittyChat_BroadcastMessageClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chittyChatBroadcastMessageClient struct {
	grpc.ClientStream
}

func (x *chittyChatBroadcastMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chittyChatClient) UserLeft(ctx context.Context, in *User, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, ChittyChat_UserLeft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChittyChatServer is the server API for ChittyChat service.
// All implementations must embed UnimplementedChittyChatServer
// for forward compatibility
type ChittyChatServer interface {
	CreateConnection(*User, ChittyChat_CreateConnectionServer) error
	BroadcastMessage(*Message, ChittyChat_BroadcastMessageServer) error
	UserLeft(context.Context, *User) (*Close, error)
	mustEmbedUnimplementedChittyChatServer()
}

// UnimplementedChittyChatServer must be embedded to have forward compatible implementations.
type UnimplementedChittyChatServer struct {
}

func (UnimplementedChittyChatServer) CreateConnection(*User, ChittyChat_CreateConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedChittyChatServer) BroadcastMessage(*Message, ChittyChat_BroadcastMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (UnimplementedChittyChatServer) UserLeft(context.Context, *User) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLeft not implemented")
}
func (UnimplementedChittyChatServer) mustEmbedUnimplementedChittyChatServer() {}

// UnsafeChittyChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChittyChatServer will
// result in compilation errors.
type UnsafeChittyChatServer interface {
	mustEmbedUnimplementedChittyChatServer()
}

func RegisterChittyChatServer(s grpc.ServiceRegistrar, srv ChittyChatServer) {
	s.RegisterService(&ChittyChat_ServiceDesc, srv)
}

func _ChittyChat_CreateConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChittyChatServer).CreateConnection(m, &chittyChatCreateConnectionServer{stream})
}

type ChittyChat_CreateConnectionServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chittyChatCreateConnectionServer struct {
	grpc.ServerStream
}

func (x *chittyChatCreateConnectionServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChittyChat_BroadcastMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChittyChatServer).BroadcastMessage(m, &chittyChatBroadcastMessageServer{stream})
}

type ChittyChat_BroadcastMessageServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chittyChatBroadcastMessageServer struct {
	grpc.ServerStream
}

func (x *chittyChatBroadcastMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChittyChat_UserLeft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyChatServer).UserLeft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChittyChat_UserLeft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyChatServer).UserLeft(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// ChittyChat_ServiceDesc is the grpc.ServiceDesc for ChittyChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChittyChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChittyChat.ChittyChat",
	HandlerType: (*ChittyChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLeft",
			Handler:    _ChittyChat_UserLeft_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateConnection",
			Handler:       _ChittyChat_CreateConnection_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BroadcastMessage",
			Handler:       _ChittyChat_BroadcastMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/template.proto",
}
